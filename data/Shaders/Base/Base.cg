//--- Helper functions ----------------------------------------------------------------
#include "ShaderConfig.h"

#define FADE_DEPTH -10
#define FADE_DIST 9

#define PCF_RADIUS 1
#define INV_SHADOWMAP_SIZE_0 0.00048828125
#define INV_SHADOWMAP_SIZE_1 0.00048828125
#define INV_SHADOWMAP_SIZE_2 0.0009765625

//Expand a compressed vector.
float3 expand(float3 v)
{
    return v * 2.0 - 1.0;
}

float shadowPCF9(sampler2D shadowMap, float4 shadowMapPos, float offset)
{
    float2 uv = shadowMapPos.xy;
    float3 o = float3(offset, offset, -offset.x) * PCF_RADIUS;

    float c = (shadowMapPos.z <= tex2D(shadowMap, uv.xy - o.xy).r) ? 1 : 0; // top left
    c +=      (shadowMapPos.z <= tex2D(shadowMap, uv.xy + o.xy).r) ? 1 : 0; // bottom right
    c +=      (shadowMapPos.z <= tex2D(shadowMap, uv.xy + o.zy).r) ? 1 : 0; // bottom left
    c +=      (shadowMapPos.z <= tex2D(shadowMap, uv.xy - o.zy).r) ? 1 : 0; // top right
    c +=      (shadowMapPos.z <= tex2D(shadowMap, uv.xy).r) ? 1 : 0; // center
    c +=      (shadowMapPos.z <= tex2D(shadowMap, float2(uv.x, uv.y - o.y)).r) ? 1 : 0; // top
    c +=      (shadowMapPos.z <= tex2D(shadowMap, float2(uv.x, uv.y + o.y)).r) ? 1 : 0; // bottom
    c +=      (shadowMapPos.z <= tex2D(shadowMap, float2(uv.x - o.x, uv.y)).r) ? 1 : 0; // left
    c +=      (shadowMapPos.z <= tex2D(shadowMap, float2(uv.x + o.x, uv.y)).r) ? 1 : 0; // right
    return c / 9;
}
float shadowPCF4(sampler2D shadowMap, float4 shadowMapPos, float offset)
{
    float2 uv = shadowMapPos.xy;
    float3 o = float3(offset, offset, -offset.x) * PCF_RADIUS;

    float c = (shadowMapPos.z <= tex2D(shadowMap, uv.xy - o.xy).r) ? 1 : 0; // top left
    c +=      (shadowMapPos.z <= tex2D(shadowMap, uv.xy + o.xy).r) ? 1 : 0; // bottom right
    c +=      (shadowMapPos.z <= tex2D(shadowMap, uv.xy + o.zy).r) ? 1 : 0; // bottom left
    c +=      (shadowMapPos.z <= tex2D(shadowMap, uv.xy - o.zy).r) ? 1 : 0; // top right
    return c / 4;
}
float shadow(sampler2D shadowMap, float4 shadowMapPos)
{
    return (shadowMapPos.z <= tex2D(shadowMap, shadowMapPos.xy).r) ? 1 : 0; // center
}

//--- The per-light shader ------------------------------------------------------------
void BasePerLight_vp
    (
         //Vertex data
         float4 position : POSITION,
         float2 uv : TEXCOORD0,
         float3 normal : NORMAL, 
         float3 tangent : TANGENT,

         uniform float3 eyePosition,
         uniform float4x4 worldViewProj,
         uniform float4x4 world, //world_matrix

         uniform float4x4 textureMat,

         //PSSM shadow projections
         uniform float4x4 twvp0,
         uniform float4x4 twvp1,
         uniform float4x4 twvp2,

         uniform float4 lightPosition,
         uniform float4 spotlightDir,

         //Lighting calculations
         out float4 oPos : POSITION,
         out float3 oUv : TEXCOORD0,
#if (NORMAL_MAPPING && SET_NORMAL_MAPPING)
         out float3 oEyeDir : TEXCOORD1,
#else
         out float3 oNorm : TEXCOORD1,
#endif
         out float4 oLight4 : TEXCOORD2, //(dir, dist)
         out float4 oHalfAngle : TEXCOORD3,
         out float3 oSpotlightDir : TEXCOORD4

         //PSSM shadow positions
#if SET_SHADOWS
         ,
         out float4 oShadowPos0 : TEXCOORD5,
         out float4 oShadowPos1 : TEXCOORD6,
         out float4 oShadowPos2 : TEXCOORD7
#endif
     ) 
{
    oPos = mul(worldViewProj, position);
    oUv.xy = mul(textureMat, float4(uv, 0, 1)).xy;
    oUv.z = oPos.z;

    //Relative light position.
    float3 lightDir = lightPosition.xyz -  (position * lightPosition.w);

    //Find length (distance).
    oLight4.w = length(lightDir);

    //Normalise direction.
    lightDir /= oLight4.w;

    //The eye direction.
    float3 EyeDir = normalize(eyePosition - position.xyz);

    oSpotlightDir = mul(world, spotlightDir).xyz;

#if (NORMAL_MAPPING && SET_NORMAL_MAPPING)
    //If normal mapping is on, we move everything to tangent-space.
    float3 binormal = cross(tangent, normal);
    float3x3 rotation = float3x3(tangent, binormal, normal);

    lightDir = mul(rotation, lightDir);
    EyeDir = mul(rotation, EyeDir);
    oSpotlightDir = mul(rotation, oSpotlightDir);
#endif

    oHalfAngle = float4(normalize(lightDir + EyeDir),
            mul(world, position).y);

#if (NORMAL_MAPPING && SET_NORMAL_MAPPING)
    oEyeDir = EyeDir;
#else
    oNorm = normal;
#endif

    //Put in oLight4
    oLight4.xyz = lightDir;

#if SET_SHADOWS
    oShadowPos0 = mul(twvp0, position);
    oShadowPos1 = mul(twvp1, position);
    oShadowPos2 = mul(twvp2, position);
#endif
}

void BasePerLight_fp
    (
         float3 uv: TEXCOORD0,

         //Lighting calculations
#if (NORMAL_MAPPING && SET_NORMAL_MAPPING)
         float3 eyeDir : TEXCOORD1,
#else
         float3 normal: TEXCOORD1,
#endif
         float4 Light4: TEXCOORD2, //(dir, dist)
         float4 HalfAngle: TEXCOORD3,
         float3 SpotlightDir: TEXCOORD4,

         //PSSM shadow positions
         float4 shadowPos0 : TEXCOORD5,
         float4 shadowPos1 : TEXCOORD6,
         float4 shadowPos2 : TEXCOORD7,

         //Material properties.
         sampler2D diffuseMap: TEXUNIT0,
         sampler2D normalBumpMap : TEXUNIT1,

         uniform float4 matDiffuse,
         uniform float4 matSpecular,

#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
         uniform float4 scaleBias,
#endif

         //Light properties.
         uniform float4 lightDiffuse,
         uniform float4 lightAtten,
         uniform float4 lightSpecular,
         uniform float4 spotlightParams,
         uniform float4 lightPosition,
         uniform float exponent,

         //Shadow properties
         //uniform float4 invShadowMapSize0,
         //uniform float4 invShadowMapSize1,
         //uniform float4 invShadowMapSize2,
         sampler2D shadowMap0 : TEXUNIT2,
         sampler2D shadowMap1 : TEXUNIT3,
         sampler2D shadowMap2 : TEXUNIT4,

         out float4 oColor : COLOR
    )
{ 
#if (NORMAL_MAPPING && SET_NORMAL_MAPPING)
#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
    float height = tex2D(normalBumpMap, uv.xy).a;
    float displacement = (height * scaleBias.x) - scaleBias.y;
    float3 uv2 = float3(uv.xy, 1); 
    uv.xy = ((eyeDir * displacement) + uv2).xy;
#endif
    //Get normal from normalmap.
    float3 N = normalize(expand(tex2D(normalBumpMap, uv.xy).xyz));
#else
    //Use passed normal.
    float3 N = normal;
#endif

    //Calculate lighting.
    float3 LightDir = Light4.xyz;
    float LightDist = Light4.w;
    float NdotL = dot(normalize(LightDir), N);
    float NdotH = dot(normalize(HalfAngle), N);

    float4 Lit = lit(NdotL,NdotH,exponent);
    float Atten = 1 / (lightAtten.y + lightAtten.z * LightDist + lightAtten.w * LightDist * LightDist);
    oColor = (matDiffuse * lightDiffuse * Lit.y +  matSpecular * lightSpecular * Lit.z) * Atten;

    //Spotlight effect.
    if (spotlightParams[2] != 0)
    {
        float angCos = dot(normalize(LightDir), normalize(SpotlightDir)); //light -> object = - (object -> light)
        float i = spotlightParams[0];
        float o = spotlightParams[1];
        oColor *= smoothstep((2*o*o)-1, (2*i*i)-1, angCos);
    }

    //Diffuse texture.
    oColor *= tex2D(diffuseMap, uv.xy);

    //Fade out near bottom of world.
    if (HalfAngle.w < FADE_DEPTH)
        oColor *= saturate((HalfAngle.w -(FADE_DEPTH) + FADE_DIST) / FADE_DIST);

    //Shadows
#if SET_SHADOWS
    if (!lightPosition.w) //Directional lights only
        if (uv.z <= 18.7167)
        {
            shadowPos0 /= shadowPos0.w;
            shadowPos0.z += 0.0001;
            //oColor *= shadow(shadowMap0, shadowPos0);// + float4(0.1, 0, 0, 1);
            oColor *= shadowPCF9(shadowMap0, shadowPos0, INV_SHADOWMAP_SIZE_0);// + float4(0.1, 0, 0, 1);
        }
        else if (uv.z <= 77.4301)
        {
            shadowPos1 /= shadowPos1.w;
            //shadowPos1.z += 0.0001;
            //oColor *= shadow(shadowMap1, shadowPos1);// + float4(0, 0.1, 0, 1);
            oColor *= shadowPCF9(shadowMap1, shadowPos1, INV_SHADOWMAP_SIZE_1);// + float4(0, 0.1, 0, 1);
        }
        else
        {
            shadowPos2 /= shadowPos2.w;
            //shadowPos2.z += 0.0001;
            oColor *= shadow(shadowMap2, shadowPos2);// + float4(0.1, 0.1, 0, 1);
        }
#endif
}

//--- The ambient one-time shader -----------------------------------------------------
void BaseAmbient_vp
   (
         float4 position : POSITION,
         float2 uv : TEXCOORD0,

         uniform float4x4 worldViewProj,
         uniform float4x4 world, //world_matrix

         uniform float4x4 textureMat,

         uniform float3 eyePosition,

#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
         float3 normal : NORMAL, 
         float3 tangent : TANGENT,
         out float3 oEyeDir : TEXCOORD1,
#endif

         out float4 oPos : POSITION,
         out float2 oUv : TEXCOORD0,
         out float4 oWorldPos : TEXCOORD2
   )
{
    oPos = mul(worldViewProj, position);
    oUv = mul(textureMat, float4(uv, 0, 1)).xy;

#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
    float3 binormal = cross(tangent, normal);
    float3x3 rotation = float3x3(tangent, binormal, normal);
    oEyeDir = normalize(eyePosition - position.xyz);
    oEyeDir = mul(rotation, oEyeDir);
#endif

    oWorldPos = mul(world, position);
}

void BaseAmbient_fp
    (
         float2 uv : TEXCOORD0,
         float4 WorldPos : TEXCOORD2,

#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
         float2 eyeDir : TEXCOORD1,
         uniform float4 scaleBias,
#endif

         uniform float4 matAmbient,
         uniform float4 lightAmbient,

         sampler2D diffuseMap : TEXUNIT0,
         sampler2D normalBumpMap : TEXUNIT1,
          
         out float4 oColor : COLOR
    )
{ 
#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
    float height = tex2D(normalBumpMap, uv).a;
    float displacement = (height * scaleBias.x) - scaleBias.y;
    float3 uv2 = float3(uv, 1); 
    uv = ((eyeDir * displacement) + uv2).xy;
#endif

    oColor = tex2D(diffuseMap, uv) * matAmbient * lightAmbient;

    //Fade out near bottom of world.
    if (WorldPos.y < FADE_DEPTH)
        oColor *= saturate((WorldPos.y -(FADE_DEPTH) + FADE_DIST) / FADE_DIST);
}

//--- Plain white for invert ----------------------------------------------------------

void BaseWhite_fp
    (
        out float4 oColor : COLOR
    )
{
    oColor = float4(1, 1, 1, 1);
}

