//--- Helper functions ----------------------------------------------------------------
float3 expand(float3 v)
{
    return v * 2.0 - 1.0;
}

float2 blurTex2D(sampler2D map, float2 uv, float radius, float2 offset) 
{
    //Simple 3x3 filter.
    float2 o = offset;
    float2 c = tex2D(map, uv.xy).rg; //Center.
    c += tex2D(map, uv.xy - o.xy).rg; //Top left.
    c += tex2D(map, uv.xy + o.xy).rg; //Bottom right.
    c += tex2D(map, float2(uv.x - o.x, uv.y)).rg; //Left.
    c += tex2D(map, float2(uv.x + o.x, uv.y)).rg; //Right.
    c += tex2D(map, float2(uv.x, uv.y + o.y)).rg; //Bottom.
    c += tex2D(map, float2(uv.x, uv.y - o.y)).rg; //Top.
    c += tex2D(map, float2(uv.x - o.x, uv.y + o.y)).rg; //Bottom left.
    c += tex2D(map, float2(uv.x + o.x, uv.y - o.y)).rg; //Top right.
    return c / 9;
}

float shadow(sampler2D shadowMap, float4 shadowMapPos, float ourDepth, float radius, float2 offset) 
{
    float2 suv = shadowMapPos.xy / shadowMapPos.w;

    float2 moments = blurTex2D(shadowMap, suv, radius, offset);
    float litFactor = (ourDepth <= moments.x ? 1 : 0);

    //Standard variance shadow mapping code.
    float E_x2 = moments.y;
    float Ex_2 = moments.x * moments.x;
    float vsmEpsilon = 0.0001;
    float variance = min(max(E_x2 - Ex_2, 0.0) + vsmEpsilon, 1.0);
    float m_d = moments.x - ourDepth;
    float p = variance / (variance + m_d * m_d);

    return smoothstep(0.4, 1, max(litFactor, p));
}

//--- The shader ----------------------------------------------------------------------
void Base_vp
    (
         float4 position : POSITION,
         float2 uv : TEXCOORD0,
         float3 normal : NORMAL, 
         float3 tangent : TANGENT,

         uniform float4 lightPosition0,
         uniform float4 lightPosition1,
         uniform float4 lightPosition2,
         uniform float3 eyePosition,
         uniform float4x4 worldViewProj,

         out float4 oPos : POSITION,
         out float2 oUv : TEXCOORD0,
#if NORMAL_MAPPING
         out float3 oEyeDir : TEXCOORD1,
#else
         out float3 oNorm : TEXCOORD1,
#endif
         out float3 oLightDir0: TEXCOORD2,
         out float3 oLightDir1: TEXCOORD3,
         out float3 oLightDir2: TEXCOORD4,
         out float3 oLightDists: TEXCOORD5,
         out float3 oHalfAngle0: TEXCOORD6,
         out float3 oHalfAngle1: TEXCOORD7
     ) 
{
    oPos = mul(worldViewProj, position);
    oUv = uv;

    //Relative light positions.
    oLightDir0 = lightPosition0.xyz -  (position * lightPosition0.w);
    oLightDir1 = lightPosition1.xyz -  (position * lightPosition1.w);
    oLightDir2 = lightPosition2.xyz -  (position * lightPosition2.w);

    //Find lengths (distances).
    oLightDists.x = length(oLightDir0);
    oLightDists.y = length(oLightDir1);
    oLightDists.z = length(oLightDir2);

    //Normalise and rotate directions.
    oLightDir0 /= oLightDists.x;
    oLightDir1 /= oLightDists.y;
    oLightDir2 /= oLightDists.z;

    float3 EyeDir = normalize(eyePosition - position.xyz);

#if NORMAL_MAPPING
    //If normal mapping is on, we move everything to tangent-space.
    float3 binormal = cross(tangent, normal);
    float3x3 rotation = float3x3(tangent, binormal, normal);

    oLightDir1 = mul(rotation, oLightDir1);
    oLightDir0 = mul(rotation, oLightDir0);
    oLightDir2 = mul(rotation, oLightDir2);
    EyeDir = mul(rotation, EyeDir);
#endif

    oHalfAngle0 = normalize(oLightDir0 + EyeDir);
    oHalfAngle1 = normalize(oLightDir1 + EyeDir);

#if NORMAL_MAPPING
    oEyeDir = EyeDir;
#else
    oNorm = normal;
#endif

    //Shadow UV.
}

void Base_fp
    (
         float2 uv: TEXCOORD0,
#if NORMAL_MAPPING
         float3 eyeDir : TEXCOORD1,
#else
         float3 normal: TEXCOORD1,
#endif
         float3 LightDir0: TEXCOORD2,
         float3 LightDir1: TEXCOORD3,
         float3 LightDir2: TEXCOORD4,
         float3 LightDists: TEXCOORD5,
         float3 HalfAngle0: TEXCOORD6,
         float3 HalfAngle1: TEXCOORD7,

         //Material properties.
         sampler2D diffuseMap: register(s0),
         sampler2D normalBumpMap: register(s1),

         uniform float4 matAmbient,
         uniform float4 matDiffuse,
         uniform float4 matSpecular,


#if PARALLAX_MAPPING
         uniform float4 scaleBias,
#endif

         //Light properties.
         uniform float4 lightDiffuse0,
         uniform float4 lightDiffuse1,
         uniform float4 lightDiffuse2, 

         uniform float4 lightAtten0,
         uniform float4 lightAtten1,
         uniform float4 lightAtten2, 

         uniform float4 lightSpecular0,
         uniform float4 lightSpecular1,

         uniform float exponent0,

         uniform float4 ambient, 

         out float4 oColor : COLOR
    )
{ 
#if NORMAL_MAPPING
#if PARALLAX_MAPPING
    float height = tex2D(normalBumpMap, uv).a;
    float displacement = (height * scaleBias.x) - scaleBias.y;
    float3 uv2 = float3(uv, 1); 
    uv = ((eyeDir * displacement) + uv2).xy;
#endif
    //Get normal from normalmap.
    float3 N = normalize(expand(tex2D(normalBumpMap, uv).xyz));
#else
    //Use passed normal.
    float3 N = normal;
#endif

    //Calculate lighting.
    //0.
    float NdotL = dot(normalize(LightDir0), N);
    float NdotH = dot(normalize(HalfAngle0), N);

    float4 Lit = lit(NdotL,NdotH,exponent0);
    float Atten = 1 / (lightAtten0.y + lightAtten0.z * LightDists.x + lightAtten0.w * LightDists.x * LightDists.x);
    oColor = (matDiffuse * lightDiffuse0 * Lit.y +  matSpecular * lightSpecular0 * Lit.z) * Atten;

    //1.
    NdotL = dot(normalize(LightDir1), N);
    NdotH = dot(normalize(HalfAngle1), N);

    Lit = lit(NdotL,NdotH,exponent0);
    Atten = 1 / (lightAtten1.y + lightAtten1.z * LightDists.y + lightAtten1.w * LightDists.y * LightDists.y);
    oColor += (matDiffuse * lightDiffuse1 * Lit.y + matSpecular * lightSpecular1 * Lit.z) * Atten; 

    //2.
    NdotL = dot(normalize(LightDir2), N);

    Lit = lit(NdotL,0,0);
    Atten = 1 / (lightAtten2.y + lightAtten2.z * LightDists.z + lightAtten2.w * LightDists.z * LightDists.z);
    oColor += (matDiffuse * lightDiffuse2 * Lit.y) * Atten;

    //Ambient.
    oColor += matAmbient * ambient;

    //Diffuse texture.
    oColor *= tex2D(diffuseMap, uv);
}

