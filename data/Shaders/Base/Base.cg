//--- Helper functions ----------------------------------------------------------------
#include "ShaderConfig.h"

//Expand a compressed vector.
float3 expand(float3 v)
{
    return v * 2.0 - 1.0;
}

//Blurred texture lookup. (thanks nullsquared!)
float2 blurTex2D(sampler2D map, float2 uv, float radius, float2 offset) 
{
    //Simple 3x3 filter.
    float2 o = offset;
    float2 c = tex2D(map, uv.xy).rg; //Center.
    c += tex2D(map, uv.xy - o.xy).rg; //Top left.
    c += tex2D(map, uv.xy + o.xy).rg; //Bottom right.
    c += tex2D(map, float2(uv.x - o.x, uv.y)).rg; //Left.
    c += tex2D(map, float2(uv.x + o.x, uv.y)).rg; //Right.
    c += tex2D(map, float2(uv.x, uv.y + o.y)).rg; //Bottom.
    c += tex2D(map, float2(uv.x, uv.y - o.y)).rg; //Top.
    c += tex2D(map, float2(uv.x - o.x, uv.y + o.y)).rg; //Bottom left.
    c += tex2D(map, float2(uv.x + o.x, uv.y - o.y)).rg; //Top right.
    return c / 9;
}

//Shadowing. (thanks nullsquared!)
float shadow(sampler2D shadowMap, float4 shadowMapPos, float ourDepth, float radius, float2 offset) 
{
    float2 suv = shadowMapPos.xy / shadowMapPos.w;

    float2 moments = blurTex2D(shadowMap, suv, radius, offset);
    float litFactor = (ourDepth <= moments.x ? 1 : 0);

    //Standard variance shadow mapping code.
    float E_x2 = moments.y;
    float Ex_2 = moments.x * moments.x;
    float vsmEpsilon = 0.0001;
    float variance = min(max(E_x2 - Ex_2, 0.0) + vsmEpsilon, 1.0);
    float m_d = moments.x - ourDepth;
    float p = variance / (variance + m_d * m_d);

    return smoothstep(0.4, 1, max(litFactor, p));
}

#define FADE_DEPTH -10
#define FADE_DIST 9

//--- The per-light shader ------------------------------------------------------------
void BasePerLight_vp
    (
         float4 position : POSITION,
         float2 uv : TEXCOORD0,
         float3 normal : NORMAL, 
         float3 tangent : TANGENT,

         uniform float3 eyePosition,
         uniform float4x4 worldViewProj,
         uniform float4x4 world, //world_matrix
         uniform float4x4 tvp, //texture_view_proj_matrix 0

         uniform float4 lightPosition,
         uniform float4 spotlightDir,

         out float4 oPos : POSITION,
         out float2 oUv : TEXCOORD0,
#if (NORMAL_MAPPING && SET_NORMAL_MAPPING)
         out float3 oEyeDir : TEXCOORD1,
#else
         out float3 oNorm : TEXCOORD1,
#endif
         out float3 oLightDir : TEXCOORD2,
         out float oLightDist : TEXCOORD3,
         out float3 oHalfAngle : TEXCOORD4,
         out float3 oSpotlightDir : TEXCOORD5,
         out float4 oShadowMapPos : TEXCOORD6
         //out float4 oWorldPos : TEXCOORD7
     ) 
{
    oPos = mul(worldViewProj, position);
    oUv = uv;

    //Relative light position.
    oLightDir = lightPosition.xyz -  (position * lightPosition.w);

    //Find length (distance).
    oLightDist = length(oLightDir);

    //Normalise direction.
    oLightDir /= oLightDist;

    //The eye direction.
    float3 EyeDir = normalize(eyePosition - position.xyz);

    oSpotlightDir = mul(world, spotlightDir).xyz;

#if (NORMAL_MAPPING && SET_NORMAL_MAPPING)
    //If normal mapping is on, we move everything to tangent-space.
    float3 binormal = cross(tangent, normal);
    float3x3 rotation = float3x3(tangent, binormal, normal);

    oLightDir = mul(rotation, oLightDir);
    EyeDir = mul(rotation, EyeDir);
    oSpotlightDir = mul(rotation, oSpotlightDir);
#endif

    oHalfAngle = normalize(oLightDir + EyeDir);

#if (NORMAL_MAPPING && SET_NORMAL_MAPPING)
    oEyeDir = EyeDir;
#else
    oNorm = normal;
#endif

    //Shadowing stuff.
    float4 oWorldPos = mul(world, position);
    oShadowMapPos = mul(tvp, oWorldPos);
}

void BasePerLight_fp
    (
         float2 uv: TEXCOORD0,
#if (NORMAL_MAPPING && SET_NORMAL_MAPPING)
         float3 eyeDir : TEXCOORD1,
#else
         float3 normal: TEXCOORD1,
#endif
         float3 LightDir: TEXCOORD2,
         float3 LightDist: TEXCOORD3,
         float3 HalfAngle: TEXCOORD4,
         float3 SpotlightDir: TEXCOORD5,
         float4 ShadowMapPos: TEXCOORD6,
         float4 WorldPos: TEXCOORD7,

         //Material properties.
         sampler2D diffuseMap: register(s0),
         sampler2D normalBumpMap : register(s1),
#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
         sampler2D glowMap : register(s3),
#endif

         uniform float4 matDiffuse,
         uniform float4 matSpecular,

#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
         uniform float4 scaleBias,
#endif

         //Light properties.
         uniform float4 lightDiffuse,
         uniform float4 lightAtten,
         uniform float4 lightSpecular,
         uniform float4 spotlightParams,
         uniform float exponent,

         //Shadow stuff.
         sampler2D shadowMap : register(s2),
         uniform float4 invSMSize,
         uniform float4 depthRange,

         out float4 oColor : COLOR
    )
{ 
#if (NORMAL_MAPPING && SET_NORMAL_MAPPING)
#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
    float height = tex2D(normalBumpMap, uv).a;
    float displacement = (height * scaleBias.x) - scaleBias.y;
    float3 uv2 = float3(uv, 1); 
    uv = ((eyeDir * displacement) + uv2).xy;
#endif
    //Get normal from normalmap.
    float3 N = normalize(expand(tex2D(normalBumpMap, uv).xyz));
#else
    //Use passed normal.
    float3 N = normal;
#endif

    //Calculate lighting.
    float NdotL = dot(normalize(LightDir), N);
    float NdotH = dot(normalize(HalfAngle), N);

    float4 Lit = lit(NdotL,NdotH,exponent);
    float Atten = 1 / (lightAtten.y + lightAtten.z * LightDist + lightAtten.w * LightDist * LightDist);
    oColor = (matDiffuse * lightDiffuse * Lit.y +  matSpecular * lightSpecular * Lit.z) * Atten;

    //Spotlight effect.
    if (spotlightParams[2] != 0)
    {
        float angCos = dot(normalize(-LightDir), normalize(-SpotlightDir)); //light -> object = - (object -> light)
        float i = spotlightParams[0];
        float o = spotlightParams[1];
        oColor *= smoothstep((2*o*o)-1, (2*i*i)-1, angCos);
    }

    //Shadow. It's /that/ easy, thanks to nullsquared. :D
    oColor *= shadow(shadowMap, ShadowMapPos, (LightDist - depthRange.x) * depthRange.w, 3, invSMSize.xy);

    //Diffuse texture.
    oColor *= tex2D(diffuseMap, uv);

#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
    oColor += tex2D(glowMap, uv);
#endif
}

//--- The ambient one-time shader -----------------------------------------------------
void BaseAmbient_vp
   (
         float4 position : POSITION,
         float2 uv : TEXCOORD0,

         uniform float4x4 worldViewProj,
         uniform float4x4 world, //world_matrix

         uniform float3 eyePosition,

#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
         float3 normal : NORMAL, 
         float3 tangent : TANGENT,
         out float3 oEyeDir : TEXCOORD1,
#endif

         out float4 oPos : POSITION,
         out float2 oUv : TEXCOORD0,
         out float4 oWorldPos : TEXCOORD2
   )
{
    oPos = mul(worldViewProj, position);
    oUv = uv;

#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
    float3 binormal = cross(tangent, normal);
    float3x3 rotation = float3x3(tangent, binormal, normal);
    oEyeDir = normalize(eyePosition - position.xyz);
    oEyeDir = mul(rotation, oEyeDir);
#endif

    oWorldPos = mul(world, position);
}

void BaseAmbient_fp
    (
         float2 uv : TEXCOORD0,
         float4 WorldPos : TEXCOORD2,

#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
         float2 eyeDir : TEXCOORD1,
         uniform float4 scaleBias,
#endif

         uniform float4 matAmbient,
         uniform float4 lightAmbient,

         sampler2D diffuseMap : register(s0),
         sampler2D normalBumpMap : register(s1),
          
         out float4 oColor : COLOR
    )
{ 
#if (PARALLAX_MAPPING && SET_PARALLAX_MAPPING)
    float height = tex2D(normalBumpMap, uv).a;
    float displacement = (height * scaleBias.x) - scaleBias.y;
    float3 uv2 = float3(uv, 1); 
    uv = ((eyeDir * displacement) + uv2).xy;
#endif

    oColor = tex2D(diffuseMap, uv) * matAmbient * lightAmbient;

    //If lower, darker.
    if (WorldPos.y < FADE_DEPTH)
        oColor *= saturate((WorldPos.y -(FADE_DEPTH) + FADE_DIST) / FADE_DIST);
}
