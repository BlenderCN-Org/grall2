ngflevel TestLevel
{
	object
	{
		type Point
		name camTarget5
		position 1.422799 7.512916 -1.543882
		rotation 1.000000 0.000000 0.000000 -0.000000
	}
	object
	{
		type Point
		name camTarget4
		position 0.329979 7.608076 -1.292562
		rotation 1.000000 0.000000 0.000000 -0.000000
	}
	object
	{
		type Point
		name camTarget3
		position -0.767940 7.512978 -0.417068
		rotation 1.000000 0.000000 0.000000 -0.000000
	}
	object
	{
		type Point
		name camTarget2
		position -1.299690 7.111808 1.414153
		rotation 1.000000 0.000000 0.000000 -0.000000
	}
	object
	{
		type Light
		name noname
		position -13.550045 0.625267 10.550045
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			lightType point
			colour 0.6 0.3 0.3
			attenuation 100 0 0.5 0
		}
	}
	object
	{
		type StaticBrush
		name thirdWall
		position -2.500000 0.499699 -9.500000
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			brushMeshFile TestLevel_b0.mesh
			dimension1 yes
			dimension2 no
		}
	}
	object
	{
		type StaticBrush
		name noname
		position -2.500000 0.499699 -5.500000
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			brushMeshFile TestLevel_b1.mesh
			dimension1 no
			dimension2 yes
		}
	}
	object
	{
		type StaticBrush
		name firstWall
		position -2.500000 0.499699 -1.500000
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			brushMeshFile TestLevel_b2.mesh
			dimension1 yes
			dimension2 no
		}
	}
	object
	{
		type StaticBrush
		name noname
		position -0.500000 0.499699 -0.500000
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			brushMeshFile TestLevel_b3.mesh
			dimension1 yes
			dimension2 yes
		}
	}
	object
	{
		type Player
		name player1
		position 10.919084 0.420549 1.500000
		rotation 0.707107 0.000000 0.707107 -0.000000

		properties
		{
			dimension1 yes
			dimension2 no
			script : import Ngf
			       : 
			       : def create(self):
			       : 	self.setLinearVelocity(self.getOrientation() * Ngf.Vector3(0,0,-5))
			       : 	self.setAngularVelocity(self.getOrientation() * Ngf.Vector3(-1,0,0))
			       : 	self.p_underControl = False
		}
	}
	object
	{
		type Light
		name noname
		position -2.500000 2.109168 5.500000
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			lightType point
			colour 0.6 0.6 0.6
			attenuation 100 1 0.01 0.01
		}
	}
	object
	{
		type CameraHandler
		name cam
		position 6.848991 5.036720 7.955254
		rotation 0.942108 -0.247786 -0.218479 -0.057463

		properties
		{
			script : import Ngf
			       : 
			       : def create(self):
			       : 	splineTime = 3.8
			       : 	
			       : 	self.beginSpline(splineTime)
			       : 	self.addSplinePoint(0, self.getPosition())	
			       : 	self.addSplinePoint(0.75, Ngf.getObject("camTarget1").getPosition())
			       : 	self.addSplinePoint(1.5, Ngf.getObject("camTarget2").getPosition())
			       : 	self.addSplinePoint(2, Ngf.getObject("camTarget3").getPosition())
			       : 	self.addSplinePoint(2.8, Ngf.getObject("camTarget4").getPosition())	
			       : 	self.addSplinePoint(3.8, Ngf.getObject("camTarget5").getPosition())	
			       : 	self.endSpline()
			       : 	
			       : 	self.p_currState = 3
			       : 	
			       : 	self.setAlarm(splineTime, 0)
			       : 	self.setAlarm(splineTime + 2.5, 1)
			       : 
			       : def alarm(self, alm):
			       : 	#Go to third-person smoothly
			       : 	if (alm == 0):
			       : 		self.p_currState = 2
			       : 		self.p_rotationFactor = 4.5
			       : 		self.p_movementFactor = 2.5
			       : 	#Now back to game
			       : 	elif (alm == 1):
			       : 		self.p_movementFactor = 4
			       : 		self.p_rotationFactor = 0
			       : 		Ngf.getObject("player1").p_underControl = True
		}
	}
	object
	{
		type Light
		name noname
		position 12.500000 2.683613 -12.500000
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			lightType point
			colour 0.2 0.2 0.5
			attenuation 200 0 0.5 0
		}
	}
	object
	{
		type Point
		name camTarget1
		position 1.096206 6.430000 5.261518
		rotation 1.000000 0.000000 0.000000 -0.000000
	}
	object
	{
		type Trigger
		name noname
		position -5.500000 0.500000 7.500000
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			dimension1 yes
			dimension2 yes
			brushMeshFile TestLevel_b4.mesh
			script : import Ngf
			       : 
			       : def collide(self, other):
			       : 	if (other.hasFlag("Player")):
			       : 		other.applyCentralImpulse(Ngf.Vector3(0,50,0))
			       : 		Ngf.destroyObject(self)
		}
	}
}

